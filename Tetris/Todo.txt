STM Version
-----------
- Review unit tests. Try to identify which ones are essential. Which ones are missing? This is the basis on which I can start the refactoring to nested transactions.
- LinesCleared and GameStateChanged should not be called from within transaction.
v Occasional crashes.
v Survival mode is slow and choppy.
v Sync errors.
v On Mac the FPS is very slow.
v Use STM in TreeRowInfos
v Future blocks shows current block as next block.
v Check out Google Perftools (http://code.google.com/p/google-perftools/wiki/GooglePerformanceTools)
v Remove Computer's dependency to MainThread.
v There is something wrong with the block types: BlockType_I appears twice.
v Restore unit-test build.
v Fix the working of the program
v Improve encapsulation by obeying the Law of Demeter


STM Notes
---------
- stm::shared<std::string> s(std::string()); // a little weird
- Uncertainty (maybe due to lack of experience) If you open an object for reading, then later open it for writing and modify it, then will I need to perform open_r again to get the new value. Or does the transaction first need to complete?
- Lot's of experimentation required in order to find which idioms/practices work well.
- Law of demeter is important when trying to hide away stm.
- Pimpl helps to avoid exposing stm.

@StackedCrooked btw, if you need something like a condition variable in the STM lib,
simply open the variables you want to wait for changes in, check their value, and
call transaction::retry(). In an ideal world, it'd then suspend the thread until
one of your opened variables is modified. In the current implementation, it's basically
a busy loop, so much less efficient, but the effect is the same :)

